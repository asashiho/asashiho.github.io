<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Containerapps on ASA Blog</title><link>https://asashiho.github.io/containerapps/</link><description>Recent content in Containerapps on ASA Blog</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>Your Copyright</copyright><lastBuildDate>Tue, 09 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://asashiho.github.io/containerapps/index.xml" rel="self" type="application/rss+xml"/><item><title>Azure Container Apps/GitHub Actionsを使ったブルーグリーンデプロイメント</title><link>https://asashiho.github.io/containerapps/containerapps/</link><pubDate>Tue, 09 Nov 2021 00:00:00 +0000</pubDate><guid>https://asashiho.github.io/containerapps/containerapps/</guid><description>このブログエントリは、MicrosoftのGlobal Blackbelt for cloud native applicationsであるDennis ZielkeのブログImplementing continuous blue/green deployments on Azure Container Apps by using GitHub Actionsについて、Dennisの承諾を得て日本語に翻訳しています。
Microsoft Azureは、GitHub ActionsやAzure Monitorに加えて、新しいServerless Application Platformである「Container Apps」をリリースしました。そこで私は、KubernetesとAzure上でBlue/Greenの継続的デプロイを行うというシナリオを再検討し、新しい技術スタックを使ってそれを実装する方法を紹介します。もし、Container Appsを使う機会がないけれと自分で試してみたいと思っているのであれば、お勧めの記事です。
ここでは、以下の機能を試します:
コンテナのランタイムとしてのAzure Container Apps クラスタ内でのサービス間の呼び出しを行うDapr トラフィックに応じてコンテナを自動的にスケーリングするKeda リビジョン間のトラフィック分割を実装するためのEnvoy Application Insightsでの分散トレーシング Azure ADのFederated Service Identityに対応したGitHub Actions システムの概要 この記事の目的は、ブルー/グリーンデプロイメントを実施し、GitHub Actionsを使用した場合に、Azure Container Appsでのダウンタイムのない継続的デプロイメントがどれだけ簡単かを確認することです。もちろん、他のCI/CDツールチェーンを使用することもできますが、ロジックのほとんどがシェルスクリプトで実装されているため、プロセスを移行する方法を簡単に見つけることができるでしょう。
アプリの概要 私は、素因数分解の計算を分散して実装するデモアプリケーションを作成しました。このアプリケーションは、キャッシングとサービス間の呼び出しにDaprを利用し、バックエンドとフロントエンドのサービスで構成されています。このアプリケーションのコード、スクリプト、セットアップ方法の説明は、Dennis ZielkeのGitHubリポジトリにあります。このリポジトリをフォークして、ご自身のAzure環境でシナリオを試してみることをお勧めします。
以下で、その仕組みをご紹介したいと思います。
パイプラインの構成とインフラの構築 まず最初にしなければならないのは、GitHub Actionsのパイプラインを設定するために、リポジトリをforkすることです。GitHubとAzureが信頼関係の機能をアップグレードしたことをご存知でしょうか。GitHub リポジトリのパイプラインに GitHubのトークンとAzure ADのトークンを交換する権限を与えれば、クライアントのSecretを共有しなくても Azureリソースを操作できるようになるということです。これは大きな進歩です。
私のリポジトリにあるパイプラインは、アプリの登録を作成し、Azureサブスクリプション内の専用リソースグループにContributorパーミッションを付与していることを前提としています。
# デプロイメント名 DEPLOYMENT_NAME=&amp;#34;dzca11cgithub&amp;#34; # リソースグループ名 RESOURCE_GROUP=$DEPLOYMENT_NAME # Azure リージョン名(japaneastは未対応) LOCATION=&amp;#34;eastus&amp;#34; # AzureのサブスクリプションID AZURE_SUBSCRIPTION_ID=$(az account show --query id -o tsv) # GitHubのユーザ名 GHUSER=&amp;#34;denniszielke&amp;#34; # GitHubのリポジトリ名 GHREPO=&amp;#34;blue-green-with-containerapps&amp;#34; # テナントID AZURE_TENANT_ID=$(az account show --query tenantId -o tsv) # リソースグループの作成 az group create -n $RESOURCE_GROUP -l $LOCATION -o none # spの作成 AZURE_CLIENTID=$(az ad sp create-for-rbac --name &amp;#34;$DEPLOYMENT_NAME&amp;#34; --role contributor --scopes &amp;#34;/subscriptions/$AZURE_SUBSCRIPTION_ID/resourceGroups/$RESOURCE_GROUP&amp;#34; -o json | jq -r &amp;#39;.</description></item></channel></rss>