<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Durable-on-aks on ASA Blog</title><link>https://asashiho.github.io/durable-on-aks/</link><description>Recent content in Durable-on-aks on ASA Blog</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>Your Copyright</copyright><lastBuildDate>Mon, 20 Jul 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://asashiho.github.io/durable-on-aks/index.xml" rel="self" type="application/rss+xml"/><item><title>Durable functions on Kubernetes</title><link>https://asashiho.github.io/durable-on-aks/durable-on-aks/</link><pubDate>Mon, 20 Jul 2020 00:00:00 +0000</pubDate><guid>https://asashiho.github.io/durable-on-aks/durable-on-aks/</guid><description>Durable Functions は、サーバーレスでステートフル関数を記述できる Azure Functionsの拡張機能です。人類の念願だったPythonもサポートされ、業務で使う機会がありましたので、ざっと動作検証しました。
Durable Functions とは Durable Functionsの主な利用シナリオは、サーバーレスアプリケーションにおける複雑でステートフルな処理を簡単に実装できるものです。
Azure FunctionがサポートするトリガーはAzure Functions でのトリガーとバインドの概念にて。
よく使いそうな処理は以下の通りです。
関数チェーン 関数チェーンは、一連の関数が特定の順序で実行されます。 このパターンでは、ある関数の出力が、別の関数の入力に適用されます。たとえば、F1、F2、F3、F4 という関数を逐次処理させたいときは 通常の命令型のコーディング構造を使用して、制御フローを実装できます。 コードは、上から下に実行され条件文やループなどの制御フローを含めることができます。またtry/catch/finally ブロックに、エラー処理ロジックを含めることができます。
たとえば、contextオブジェクトを使用して、他の関数を名前で呼び出し、パラメーターを渡して、関数の出力を返すことができます。 コードがyieldを呼び出すたびに Durable Functionsは、チェックポイントを設定します。
import azure.functions as func import azure.durable_functions as df def orchestrator_function(context: df.DurableOrchestrationContext): x = yield context.call_activity(&amp;#34;F1&amp;#34;, None) y = yield context.call_activity(&amp;#34;F2&amp;#34;, x) z = yield context.call_activity(&amp;#34;F3&amp;#34;, y) result = yield context.call_activity(&amp;#34;F4&amp;#34;, z) return result main = df.Orchestrator.create(orchestrator_function) ファンアウト/ファンイン 複数の関数を並列で実行し、すべての関数が完了するまで待機できます。複数の関数から返される結果に基づいて集計作業などを行うときに使うと便利です。
import azure.functions as func import azure.</description></item></channel></rss>