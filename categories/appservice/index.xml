<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>appservice on ASA Blog</title><link>https://asashiho.github.io/categories/appservice/</link><description>Recent content in appservice on ASA Blog</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>Your Copyright</copyright><lastBuildDate>Wed, 01 Sep 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://asashiho.github.io/categories/appservice/index.xml" rel="self" type="application/rss+xml"/><item><title>Azure AppServiceでOpenID Connect プロバイダーを使用してログインする</title><link>https://asashiho.github.io/appservice-oidc/appservice-oidc/</link><pubDate>Wed, 01 Sep 2021 00:00:00 +0000</pubDate><guid>https://asashiho.github.io/appservice-oidc/appservice-oidc/</guid><description>※ 本エントリーは2021/09時点の内容になります。現在プレビュー機能のため内容が変更になる場合があります。
AzureのAppServiceは、認証プロバイダとしてAzure AD/Facebook/Google/Twitterに加えて、OpenID Connectを選ぶことができます。 このエントリーは、OpenID Connect の仕様に準拠したカスタム認証プロバイダーを使用してAzure App Servicesを構成する方法を説明します。
KeyCloakでOpenID Connectプロバイダーを構築する まずはじめに機能検証を行うために、OpenID Connectプロバイダーを構築します。既存のIDプロバイダーがある場合はそちらを使ってください。
KeyCloakの検証環境構築 ここでは、Azure Container InstanceとKeyCloakを使って簡易的なIDプロバイダを作成します。
まず、Azureの東日本リージョンにリソースグループを作成します
az login RG_NAME=keycloak ACI_NAME=keycloak az group create -n $RG_NAME -l japaneast Azure Container Instanceは(ACI)、Azureが提供するコンテナ実行環境サービスです。 次のコマンドを実行してKeyCloakをAzure Container Instanceを起動します。 ここで、'&amp;ndash;environment-variablesオプション&amp;rsquo; でKeyCloakの管理者ユーザ名を&amp;rsquo;KEYCLOAK_USER&amp;rsquo;、パスワードを&amp;rsquo;KEYCLOAK_PASSWORD'に設定します。
az container create \ -g $RG_NAME \ -n $ACI_NAME \ --image jboss/keycloak \ --dns-name-label aci-keycloak \ --ports 8080 \ --environment-variables &amp;#39;KEYCLOAK_USER&amp;#39;=&amp;#39;admin&amp;#39; &amp;#39;KEYCLOAK_PASSWORD&amp;#39;=&amp;#39;password&amp;#39; 次のコマンドを実行すると、ACIの完全修飾ドメイン名(FQDN)とそのプロビジョニング状態が表示されます。
az container show \ -g $RG_NAME \ -n $ACI_NAME \ --query &amp;#34;{FQDN:ipAddress.</description></item></channel></rss>