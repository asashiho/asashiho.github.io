<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kubernetes-deployments on ASA Blog</title><link>https://asashiho.github.io/kubernetes-deployment/</link><description>Recent content in Kubernetes-deployments on ASA Blog</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>Your Copyright</copyright><lastBuildDate>Sun, 10 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://asashiho.github.io/kubernetes-deployment/index.xml" rel="self" type="application/rss+xml"/><item><title>Kubernetes上で動くアプリのバージョンアップ、裏側でなにがおこっているのか</title><link>https://asashiho.github.io/kubernetes-deployment/kubernetes-deployment/</link><pubDate>Sun, 10 Oct 2021 00:00:00 +0000</pubDate><guid>https://asashiho.github.io/kubernetes-deployment/kubernetes-deployment/</guid><description>最近業務でお手伝いさせていただく案件のなかでも、Java on Kubernetesなパターンが増えてきています。Kubernetesに限らずクラウドのマネージドPaaSで動かすにはアプリケーション側でもクラウドネイティブを考慮した実装が必要になり、特に耐障害性や回復性などを意識した実装が大事になってきます。
アプリケーションのリリース方式も、オンプレでのWeb3層システムとは考え方が異なる部分やKubernetesのしくみを正しく理解しておく必要があるので、あらためて整理したいと思います。
アプリのバージョンアップ アプリケーション開発の世界では、1度リリース完了したらそれで終わりではなく、新機能追加やバグ修正などによりバージョンアップが行われます。特にビジネス要件の変更が頻繁なケースでは、小さな単位でアプリケーションの機能追加/修正し、短いタイミングでリリースする手法が使われています。
しかしながら、アプリケーションのバージョンアップには危険を伴います。ちょっとした設定ミスによりシステムエラーをおこし、場合によってはサービス停止に至ることもあるでしょう。したがって、テスト済みの安全なものを、なるべく迅速に本番環境にデプロイできるしくみを整えることが大事です。
アプリケーションを本番環境にデプロイする手法はいくつかありますが、代表的なものは次の2つです。
ローリングアップデート アプリケーションをバージョンアップする際に、まとめて一気に変更するのではなく、稼動状態のまま少しずつ順番に更新する手法です。同じアプリケーションが複数並列に動いている場合に徐々に入れ替えていくので、バージョンアップ中は新旧のアプリケーションが混在することになります。そのためアプリケーションがローリングアップデートに対応している必要があります。
ブルー/グリーンデプロイメント バージョンの異なる新旧2つのアプリケーションを同時に起動させておき、ネットワークの設定変更で変更する方法です。ブルー（旧）とグリーン（新）を切り替えることから、ブルー/グリーンデプロイメントと呼ばれます。 ブルーが本番としてサービス提供しているときには、グリーンは待機している状態となります。新機能は、待機系であるグリーン側に追加して、こちらで事前テストを実施します。そしてテストをクリアしたことを確認したうえでグリーンを本番に切り替えます。この方式はもし切り替えたグリーンのアプリケーションで障害があったときに、即座にブルーに切り戻せるというメリットがあります。
このほかにも、一部の利用者にのみ新機能を提供し、問題がないことを確認してから全ユーザに大規模展開するカナリアリリースなどもあります。
Deploymentを使ったアプリのバージョンアップ Kubernetesには、安全にアプリをアップデートするしくみが備わっていて「Deployment」と呼ばれています。
この、Deploymentリソースには、大きく分けて次の2つのアップデートの処理方式があります。これは、マニフェストファイルのDeploymentのspec-strategy-typeで設定し、デフォルトはRollingUpdateです。
spec: strategy: type: Recreate Recrate いったん古いPodをすべて停止し、新しいPodを再作成する方式です。シンプルで高速に動きますが、ダウンタイムが発生します。開発環境やダウンタイムが許容できるシステムなどで使います。
RollingUpdate クラスターで動くPodを少しずつアップデートしていく方式です。古いPodが動いている状態で、新しいPodを起動し、新しいPodの起動が確認出来たら古いPodを停止するという動きをします。一時的に新旧のバージョンが混在するので処理方法は複雑になりますが、ダウンタイムなしで移行できるのが特徴です。本番環境ではこちらを採用するのが良いでしょう。
DeploymentによるRollingUpdate ここではDeploymentリソースのデフォルトになっているRollingUpdateによるバージョンアップの挙動をみていきます。
ロールアウト ロールアウトとは、アプリケーションをクラスター内にデプロイし、サービスを稼働させることです。
ここで、次のDeploymentを作成します。
apiVersion: apps/v1 kind: Deployment metadata: labels: app: front name: front spec: replicas: 3 strategy: type: RollingUpdate selector: matchLabels: app: front template: metadata: labels: app: front spec: containers: - image: xxx/frontend:v1.0.0 name: front 次のコマンドを実行すると、クラスタにfrontend:v1.0.0がデプロイされます。</description></item></channel></rss>